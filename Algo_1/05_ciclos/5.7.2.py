# Escribir una funci칩n que reciba un n칰mero entero k e imprima su descomposi-
# ci칩n en factores primos.

from helpers import divisores, es_primo

def factorizaci칩n(n칰mero: int):
    """
    Devuelve una cadena de caracteres que representa la factorizaci칩n en primos del n칰mero dado.
    Par치metros:
        n칰mero (int): El n칰mero entero positivo que se va a factorizar.
    Retorna:
        str: Una cadena de caracteres que muestra la factorizaci칩n en primos del n칰mero. 
    Observaci칩n:
        ValueError: Se lanza si el n칰mero no es un entero positivo.
    """
    if n칰mero <= 0:
        raise ValueError("El n칰mero debe ser un entero positivo.")
    factorizaci칩n = []
    for primo, exponente in _factorizaci칩n(n칰mero):
        factorizaci칩n.append(f"{primo}^{exponente}")
    return '*'.join(factorizaci칩n)

def _factorizaci칩n(n칰mero: int):
    """
    Describe una lista de tuplas formadas por los divisores primos con sus respectivos exponenetes en la factorizaci칩n de 'n칰mero'.
    Pre:
        - Debe ser 'n칰mero' > 0.
    """
    divisores_y_exponentes = []
    for primo in divisores_primos(n칰mero):
        divisores_y_exponentes.append((primo, exponente_en_fact(n칰mero, primo)))
    return divisores_y_exponentes

def divisores_primos(n칰mero: int):
    """
    Describe una lista de los divisores primos del n칰mero dado.
    Pre:
        - El n칰mero dado debe ser > 0.
    """
    # return primos(divisores(n칰mero))
    return list(filter(es_primo, divisores(n칰mero)))

def exponente_en_fact(n칰mero: int, divisor: int):
    """
    Describe el exponente de 'divisor' en la factorizaci칩n de 'n칰mero'.
    En caso de que la divisi칩n no sea entera, describe 0.
    Pre:
        - Deben ser 'n칰mero' y 'divisor' > 0.
    """
    exponente = 0
    while n칰mero > 0 and not n칰mero % divisor:
        exponente += 1
        n칰mero     = n칰mero // divisor
    return exponente

# Ejemplos de uso
n칰mero = 120
print(f"Factorizaci칩n en primos de {n칰mero}: {factorizaci칩n(n칰mero)}")

# Funci칩n auxiliar -- No utilizada 游뱂

# def primos(n칰meros: list):
#     """
#     Describe una lista con los n칰meros primos de la lista de n칰meros dada.
#     """
#     primos = []
#     for n칰mero in n칰meros:
#         if es_primo(n칰mero):
#             primos.append(n칰mero)
#     return primos